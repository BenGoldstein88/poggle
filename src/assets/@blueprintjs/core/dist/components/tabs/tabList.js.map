{"version":3,"sources":["../src/components/tabs/tabList.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;;;;AAEH,IAAY,UAAU,WAAM,YAAY,CAAC,CAAA;AACzC,IAAY,UAAU,WAAM,uBAAuB,CAAC,CAAA;AACpD,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAE/B,kCAAkC,gCAAgC,CAAC,CAAA;AACnE,IAAY,OAAO,WAAM,sBAAsB,CAAC,CAAA;AAmBhD;IAA6B,2BAAoC;IAAjE;QAA6B,8BAAoC;QACtD,gBAAW,GAAG,mBAAmB,CAAC;QAClC,UAAK,GAAkB;YAC1B,aAAa,EAAE,KAAK;SACvB,CAAC;IAwBN,CAAC;IAtBU,wBAAM,GAAb;QACI,MAAM,CAAC,CACH,qBAAC,EAAE,IACC,SAAS,EAAE,UAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAE,EAC9D,IAAI,EAAC,SAAS;YAEd,qBAAC,GAAG,IACA,SAAS,EAAE,UAAU,CAAC,0BAA0B,EAAE,EAAE,iBAAiB,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAE,EACpG,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,qBAAsB;gBAExC,qBAAC,GAAG,IAAC,SAAS,EAAC,kBAAkB,EAAG;aAClC;YACL,IAAI,CAAC,KAAK,CAAC,QAAS,CACpB,CACR,CAAC;IACN,CAAC;IAEM,oCAAkB,GAAzB,UAA0B,SAAwB;QAAlD,iBAIC;QAHG,EAAE,CAAC,CAAC,SAAS,CAAC,qBAAqB,IAAI,IAAI,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,EAAtC,CAAsC,CAAC,CAAC;QAClE,CAAC;IACL,CAAC;IA5BL;QAAC,UAAU;eAAA;IA6BX,cAAC;AAAD,CA5BA,AA4BC,CA5B4B,qCAAiB,GA4B7C;AA5BY,eAAO,UA4BnB,CAAA;AAEY,sBAAc,GAAG,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC","file":"components/tabs/tabList.js","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\n\nimport { AbstractComponent } from \"../../common/abstractComponent\";\nimport * as Classes from \"../../common/classes\";\nimport { IProps } from \"../../common/props\";\n\nexport interface ITabListProps extends IProps {\n    /**\n     * The list of CSS rules to use on the indicator wrapper.\n     * @internal\n     */\n    indicatorWrapperStyle?: React.CSSProperties;\n}\n\nexport interface ITabListState {\n    /**\n     * Whether the animation should be run when transform changes.\n     */\n    shouldAnimate?: boolean;\n}\n\n@PureRender\nexport class TabList extends AbstractComponent<ITabListProps, {}> {\n    public displayName = \"Blueprint.TabList\";\n    public state: ITabListState = {\n        shouldAnimate: false,\n    };\n\n    public render() {\n        return (\n            <ul\n                className={classNames(Classes.TAB_LIST, this.props.className)}\n                role=\"tablist\"\n            >\n                <div\n                    className={classNames(\"pt-tab-indicator-wrapper\", { \"pt-no-animation\": !this.state.shouldAnimate })}\n                    style={this.props.indicatorWrapperStyle}\n                >\n                    <div className=\"pt-tab-indicator\" />\n                </div>\n                {this.props.children}\n            </ul>\n        );\n    }\n\n    public componentDidUpdate(prevProps: ITabListProps) {\n        if (prevProps.indicatorWrapperStyle == null) {\n            this.setTimeout(() => this.setState({ shouldAnimate: true }));\n        }\n    }\n}\n\nexport const TabListFactory = React.createFactory(TabList);\n"]}