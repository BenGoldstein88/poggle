{"version":3,"sources":["../src/components/button/abstractButton.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAE/B,IAAY,IAAI,WAAM,mBAAmB,CAAC,CAAA;AAE1C,sBAA2B,oBAAoB,CAAC,CAAA;AAqBhD;IAAgD,kCAAgE;IAAhH;QAAA,iBAmCC;QAnC+C,8BAAgE;QACrG,UAAK,GAAG;YACX,QAAQ,EAAE,KAAK;SAClB,CAAC;QAGQ,gBAAW,GAAG;YACpB,MAAM,EAAE,UAAC,GAAgB;gBACrB,KAAI,CAAC,SAAS,GAAG,GAAG,CAAC;gBACrB,kBAAU,CAAC,KAAI,CAAC,KAAK,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;YAC3C,CAAC;SACJ,CAAC;QAIQ,cAAS,GAAG,UAAC,CAAmC;YACtD,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACd,KAAK,IAAI,CAAC,KAAK;oBACX,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,KAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;oBAClC,KAAK,CAAC;gBACV,KAAK,IAAI,CAAC,KAAK;oBACX,KAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;oBACvB,KAAK,CAAC;gBACV;oBACI,KAAK,CAAC;YACd,CAAC;QACL,CAAC,CAAA;QAES,YAAO,GAAG,UAAC,CAAmC;YACpD,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACzB,KAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;gBACnC,KAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YAC3B,CAAC;QACL,CAAC,CAAA;IACL,CAAC;IAAD,qBAAC;AAAD,CAnCA,AAmCC,CAnC+C,KAAK,CAAC,SAAS,GAmC9D;AAnCqB,sBAAc,iBAmCnC,CAAA","file":"components/button/abstractButton.js","sourcesContent":["import * as React from \"react\";\n\nimport * as Keys from \"../../common/keys\";\nimport { IActionProps } from \"../../common/props\";\nimport { safeInvoke } from \"../../common/utils\";\n\nexport interface IButtonProps extends IActionProps {\n    /** A ref handler that receives the native HTML element backing this component. */\n    elementRef?: (ref: HTMLElement) => any;\n\n    /** Name of icon (the part after `pt-icon-`) to add to button. */\n    rightIconName?: string;\n\n    /**\n     * If set to true, the button will display a centered loading spinner instead of its contents.\n     * The width of the button is not affected by the value of this prop.\n     * @default false\n     */\n    loading?: boolean;\n}\n\nexport interface IButtonState {\n    isActive: boolean;\n}\n\nexport abstract class AbstractButton<T> extends React.Component<React.HTMLProps<T> & IButtonProps, IButtonState> {\n    public state = {\n        isActive: false,\n    };\n\n    protected buttonRef: HTMLElement;\n    protected refHandlers = {\n        button: (ref: HTMLElement) => {\n            this.buttonRef = ref;\n            safeInvoke(this.props.elementRef, ref);\n        },\n    };\n\n    public abstract render(): JSX.Element;\n\n    protected onKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\n        switch (e.which) {\n            case Keys.SPACE:\n                e.preventDefault();\n                this.setState({ isActive: true });\n                break;\n            case Keys.ENTER:\n                this.buttonRef.click();\n                break;\n            default:\n                break;\n        }\n    }\n\n    protected onKeyUp = (e: React.KeyboardEvent<HTMLElement>) => {\n        if (e.which === Keys.SPACE) {\n            this.setState({ isActive: false });\n            this.buttonRef.click();\n        }\n    }\n}\n"]}